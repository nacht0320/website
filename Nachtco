{
"name": "render-ai-website",
"version": "1.0.0",
"description": "AI website with multi-provider support (OpenAI, Anthropic, Local LLM)",
"main": "server.js",
"scripts": {
"start": "node server.js"
},
"dependencies": {
"express": "^4.18.2",
"node-fetch": "^2.6.7"
}
}node_modules
.envconst express = require('express');
model: process.env.ANTHROPIC_MODEL || 'claude-2.1',
prompt: `${systemPrompt}${anthropicPrompt}`,
max_tokens_to_sample: Number(process.env.MAX_TOKENS) || 500
};


const res = await fetch(apiUrl, {
method: 'POST',
headers: {
'Content-Type': 'application/json',
'x-api-key': apiKey
},
body: JSON.stringify(body)
});


if (!res.ok) throw new Error(`Anthropic error ${res.status}: ${await res.text()}`);
const data = await res.json();
return data?.completion || data?.completion_text || JSON.stringify(data);
}


async function callLocalLLM(prompt) {
const url = process.env.LOCAL_LLM_URL;
if (!url) throw new Error('LOCAL_LLM_URL not set');


const res = await fetch(url, {
method: 'POST',
headers: { 'Content-Type': 'application/json' },
body: JSON.stringify({ prompt })
});


if (!res.ok) throw new Error(`Local LLM error ${res.status}: ${await res.text()}`);
const data = await res.json();
return data?.result || JSON.stringify(data);
}


app.post('/api/generate', async (req, res) => {
try {
const { prompt } = req.body;
if (!prompt) return res.status(400).json({ error: 'Missing prompt' });


let message;
if (PROVIDER === 'openai') {
message = await callOpenAI(prompt);
} else if (PROVIDER === 'anthropic') {
message = await callAnthropic(prompt);
} else if (PROVIDER === 'local') {
message = await callLocalLLM(prompt);
} else {
return res.status(400).json({ error: `Unknown PROVIDER: ${PROVIDER}` });
}


res.json({ result: message });
} catch (err) {
console.error(err);
res.status(500).json({ error: 'Server error', details: err.message });
}
});


app.get('*', (req, res) => {
res.sendFile(path.join(__dirname, 'public', 'index.html'));
});


app.listen(PORT, () => {
console.log(`Server running on port ${PORT} (provider: ${PROVIDER})`);
});
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Render AI Website</title>
<style>
body { font-family: sans-serif; margin: 2rem; }
textarea { width: 100%; height: 120px; }
button { padding: 0.5rem 1rem; margin-top: 0.5rem; }
#response { margin-top: 1rem; padding: 1rem; border: 1px solid #ccc; white-space: pre-wrap; }
</style>
</head>
<body>
<h1>AI Prompt Interface</h1>
<textarea id="prompt" placeholder="Type your prompt here..."></textarea><br>
<button onclick="sendPrompt()">Submit</button>
<div id="response"></div>


<script>
async function sendPrompt() {
const prompt = document.getElementById('prompt').value;
const res = await fetch('/api/generate', {
method: 'POST',
headers: { 'Content-Type': 'application/json' },
body: JSON.stringify({ prompt })
});
const data = await res.json();
document.getElementById('response').innerText = data.result || data.error;
}
</script>
</body>
</html>
services:
- type: web
name: render-ai-website
env: node
plan: free
buildCommand: "npm install"
startCommand: "npm start"
envVars:
- key: PROVIDER
value: openai
- key: OPENAI_API_KEY
sync: false
